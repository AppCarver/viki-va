# .github/workflows/ci.yml

name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Run on pushes to the main branch
      - feat/hello-world # Also run on pushes to your feature branch
  pull_request:
    branches:
      - main # Run on pull requests targeting the main branch

jobs:
  build:
    runs-on: ubuntu-latest # Use the latest Ubuntu environment provided by GitHub Actions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: Set up Python
        uses: actions/setup-python@v5 # Action to set up Python
        with:
          python-version: '3.12' # Ensure this matches your pyproject.toml target-version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest mypy
          # --- ADD/UNCOMMENT THIS LINE ---
          pip install -r requirements.txt
          # --- END ADDITION/UNCOMMENT ---

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Run Ruff (Linting & Formatting)
        run: |
          ruff check . --config pyproject.toml
          ruff format . --check --config pyproject.toml

      - name: Run Pytest (Tests)
        run: pytest

      - name: Run MyPy (Type Checking)
        run: mypy .
  
      - name: Upload Coverage Report (HTML)
        uses: actions/upload-artifact@v4 # Use the upload-artifact action
        with:
          name: code-coverage-report # Name of the artifact
          path: htmlcov/ # Path to the directory created by pytest-cov
        # This condition ensures the artifact is uploaded even if a previous step failed.
        # This is useful for debugging a failed test or coverage gate.
        if: always() # Always run this step, even if previous steps failed
