"""Define the OutputManagerInterface.

This is an Abstract Base Class (ABC).that establishes the
contract for any OutputManager implementation within Viki.

It ensures that all concrete OutputManager classes adhere to a consistent
API for sending Viki's natural language responses to various user devices
and output channels.
"""

from abc import ABC, abstractmethod
from typing import Any
from uuid import UUID


class OutputManagerInterface(ABC):
    """Abstract Base Class for the OutputManager.

    Defines the contract for managing the delivery of Viki's responses
    to various output channels.
    """

    @abstractmethod
    def send_response(
        self,
        conversation_id: UUID,
        user_id: UUID,
        device_id: str,
        va_response_text: str,
        output_format_hints: dict[str, Any] | None = None,
    ) -> dict[str, Any]:
        """Deliver an NL response to a specified user device.

        Ensuring we are adapting it to the device's capabilities.

        Args:
        ----
            conversation_id (UUID): The ID of the conversation.
            user_id (UUID): The ID of the user to whom the response is addressed.
            device_id (str):
                A unique identifier for the specific device or communication channel.
            va_response_text (str):
                The final natural language text generated by Viki.
            output_format_hints (dict, optional):
                Additional hints for desired output formatting.

        Returns
        -------
            Dict[str, Any]:
                A dictionary indicating the outcome of the delivery attempt.
                Expected keys: "success", "delivery_status", "message_id", "error".

        """
        pass
